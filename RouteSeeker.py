# -*- coding: utf-8 -*-
"""
Created on Sat Apr 18 14:31:58 2020

@author: Grigorii Podoksik
"""

import random
import numpy as np
import math


class Robot(object):
    pos = 0
    cargo = 0
    acc = 0
    shootingTime = 0   
    criticalSpeed = 3
    sequence = []
    
    def __init__(self, startPos, cargo, acc, shootingTime):
        self.pos = startPos
        self.cargo = cargo 
        self.acc = acc
        self.shootingTime = shootingTime
        self.sequence.append (np.array ([self.pos[0], self.pos[1]], int))
        
    
    def move (self, v_old, t):
        speed = math.sqrt(v_old[0]**2 + v_old[1]**2) + random.uniform(-self.acc, self.acc)*t
        #print ("Speed: " + str(speed))
        
        tickets = [np.array([self.pos[0], self.pos[1]], float)]
        radius = max(abs(speed*t), 1)
        for i in range (math.ceil(max(self.pos[0] - radius, 0)), math.floor(min(self.pos[0] + radius, 63))):
            for j in range (math.ceil(max(self.pos[1] - math.sqrt(radius**2 - (i-self.pos[0])**2), 0)), math.floor(min(self.pos[1] + math.sqrt(radius**2 - (i-self.pos[0])**2), 48))):
                d_pos = np.array([i-self.pos[0], j-self.pos[1]], float)
                if (field[i][j] != 'w'):
                    ticketsTemp = [np.array([i, j], float)]*int(np.linalg.norm (d_pos - value[i][j]))
                    #print (str(d_pos) + " - " + str (value[i][j]) + " = " + str(np.linalg.norm (d_pos - value[i][j])))
                    tickets.extend(ticketsTemp)
                
                
                
#                for k in range (int(value[i][j]) + 1):
#                    if ((speed < self.criticalSpeed) or (abs((np.dot(d_pos, v_old))/(math.sqrt((d_pos[0]**2  + d_pos[1]**2)*(v_old[0]**2 + v_old[1]**2)))) > 0.174)):
#                        if (field[i][j] != 'w'):
#                            tickets.append ([i, j])
        
        pos_old = self.pos
        #print ("Position: ["+ str(self.pos[0]) + ", " + str(self.pos[1]) + "]")
        self.pos = tickets[random.randrange(0, len(tickets))]
        #print(self.pos)
        self.pos = np.array ([self.pos[0], self.pos[1]], int)
        
        self.sequence.append(self.pos)
        
        return (np.array([(self.pos[0] - pos_old[0])/t, (self.pos[1] - pos_old[1])/t], float))



field = [['w', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '','l', '', '','w'],
 ['w', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '','w'],
 ['w', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '','w'],
 ['w', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '','w'],
 ['w', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '','w'],
 ['w', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '','w'],
 ['w', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '','w'],
 ['w', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '','w'],
 ['w', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '','w'],
 ['w', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '','l', '', '','w'],
 ['w', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '','w'],
 ['w', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '','w'],
 ['w', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '','w'],
 ['w', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '','w'],
 ['w', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '','w'],
 ['w', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '','w'],
 ['w', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '','w'],
 ['w', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '','w'],
 ['w', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '','l', '', '','w'],
 ['w', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '','w'],
 ['w', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '','w'],
 ['w', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '','w'],
 ['w', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '','w','w','w','w', '', '', '', '', '','w'],
 ['w', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '','w','w','w','w', '', '', '', '', '','w'],
 ['w', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '','w','w','w','w', '', '', '', '', '','w'],
 ['w', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '','w', '', '', '', '', '','w'],
 ['w', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '','l', '','l', '','w'],
 ['w', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '','w'],
 ['w', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '','w'],
 ['w', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '','w'],
 ['w', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '','w','w','w', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '','w'],
 ['w', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '','w','w','w', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '','w'],
 ['w', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '','w','w','w', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '','w'],
 ['w', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '','w'],
 ['w', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '','w'],
 ['w', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '','w'],
 ['w', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '','w'],
 ['w', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '','w'],
 ['w', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '','w'],
 ['w', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '','w'],
 ['w', '', '', '', '', '', '', '', '', 'l', 'l', 'l', 'l', 'l', 'l', 'l', 'l', 'l', 'l', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '','w'],
 ['w', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '','w'],
 ['w', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '','w'],
 ['w', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '','w'],
 ['w','i','i','i','i','i','i','i','i','i','i','i','i','i','i','i','i','i','i','i','i','i','i','i','i','i','i','i','i','i','i','i','i','i','i','i','i','i','i','i','i','i','i','i','i','i','i','w'],
 ['w', '', '', '', '', '', '', '', '', '', '', '','','','', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '','w'],
 ['w', '', '', '', '', '', '','','','','','','','','','','','','','', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '','w'],
 ['w', '', '', '', '', '','','','','','','','','','','','','','','','', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '','w'],
 ['w', '', '', '','','','s','s','s','s','s','s','s','s','s','s','s','s','s','s','','','', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '','w'],
 ['w', '','','','s','s','s','s','s','s','s','s','s','s','s','s','s','s','s','s','s','s','','','', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '','w'],
 ['w', '','','s','s','s','s','s','s','s','s','s','s','s','s','s','s','s','s','s','s','s','s','','', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '','w'],
 ['w','','','s','s','s','s','s','s','s','s','s','s','s','s','s','s','s','s','s','s','s','s','s','','', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '','w'],
 ['w','','s','s','s','s','s','s','s','s','s','s','s','s','s','s','s','s','s','s','s','s','s','s','s','','', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '','w'],
 ['w','s','s','s','s','s','s','s','s','s','s','s','s','s','s','s','s','s','s','s','s','s','s','s','s','','','', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '','w'],
 ['w','s','s','s','s','s','s','s','s','s','s','s','s','s','s','s','s','s','s','s','s','s','s','s','s','s','s','s', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '','w'],
 ['w','s','s','s','s','s','s','s','s','s','s','s','s','s','s','s','s','s','s','s','s','s','s','s','s','s','s','s','s', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '','w'],
 ['w','s','s','s','s','s','s','s','s','s','s','s','s','s','s','s','s','s','s','s','s','s','s','s','s','s','s','s','s', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '','w'],
 ['w','s','s','s','s','s','s','s','s','s','s','s','s','s','s','s','s','s','s','s','s','s','s','s','s','s','s','s','s', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '','w'],
 ['w', '', '','s','s','s','s','s','s','s','s','s','s','s','s','s','s','s','s','s','s','s','s','s','s','s','s','s', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '','w'],
 ['w', '', '', '','s','s','s','s','s','s','s','s','s','s','s','s','s','s','s','s','s','s','s','s','s','s','s','s', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '','w'],
 ['w', '', '', '', '', '','s','s','s','s','s','s','s','s','s','s','s','s','s','s','s','s','s','s','s','s','s','s', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '','w'],
 ['w','w','w','w','w','w', '', '', '', '','s','s','s','s','s','s','s','s','s','s','s','s', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '','w','w','w','w','w','w'],
 ['w','w','w','w','w','w','w','w','w','w','w','s','s','s','s','s','s', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '','w','w','w','w','w','w','w','w','w','w','w'],
 ['w','w','w','w','w','w','w','w','w','w','w','w','w','w','w','w','w','w','w','w','w','w','w','w','w','w','w','w','w','w','w','w','w','w','w','w','w','w','w','w','w','w','w','w','w','w','w','w']]


startingLineValue = [0]*len(field[0])
startingLineValue[0] = 0
startingLineValue[len(field[0])-1] = 0
havingCargoAdvantage = 0.5
value = []
maxTime = 15.00

for i in range (len(field)):
    value.append([])
    for j in range (len(field[0])):
        value[i].append ([np.array([0, 0], float)])

bestScore = 0
bestSequence = []

for attemptNum in range (1000):
    cellsToRestore = []
    score = 0.0
    for startingLine in range (len(field)):   
        if (field[startingLine].count ('i') != 0):
            break
    
    startingLineTickets = []
    for i in range (len(startingLineValue)):
        for j in range (round(startingLineValue[i]) + 1):
            startingLineTickets.append(np.array([startingLine, i], float))
    startingPos = startingLineTickets[random.randrange(1, len(startingLineTickets))]
    robot = Robot (startingPos, 3, 10, 1)
    
    time = 0.00
    tactsAmount = maxTime*1
    increment = maxTime / tactsAmount
    v = np.array([0, 0], float)
    while (time <= maxTime):
        v = robot.move (v, increment)
        while ((field[int(robot.pos[0])][int(robot.pos[1])] == 's') and (robot.cargo > 0) and (time <= maxTime)):
            robot.sequence.append ("s")
            time += robot.shootingTime
#            score += 3
            robot.cargo -= 1
        if ((field[int(robot.pos[0])][int(robot.pos[1])] == 'l') and (robot.cargo < 5)):
            robot.sequence.append ("l")
            time += robot.shootingTime
            robot.cargo += 1
            cellsToRestore.append([robot.pos[0], robot.pos[1], 'l'])
            field[int(robot.pos[0])][int(robot.pos[1])] = 't'
            
        time += increment
    
    score -= (3 - robot.cargo)*havingCargoAdvantage
        
    print ("\nTrial " + str(attemptNum+1))
#    if (attemptNum % 100 >= 85):
#        print (robot.sequence, end = "\n")
#        print ()
    
    tempSequence = []
    for i in range (len(robot.sequence)):
        tempSequence.append(robot.sequence[i])
    
    while (len(tempSequence) > 0):
        i = len(tempSequence) - 2
        if (type(tempSequence[i+1]) != str):
            lastElement = tempSequence[i+1]
            
        if (tempSequence[i] == 's'):
            score += 3 - havingCargoAdvantage
        else:
            if (tempSequence[i] == 'l'):
                score += havingCargoAdvantage
            else:
                if (type(tempSequence[i]) != str):
                    value[tempSequence[i][0]][tempSequence[i][1]] += np.array([lastElement[0] - tempSequence[i][0], lastElement[1] - tempSequence[i][1]], float)*max(score, 0) 
        position = tempSequence.pop(i+1)
        print ("\033[0m", end = '')
        if (position == 's'):
            print ("\033[43m", end = '')
        else:
            if (position == 'l'):
                print ("\033[45m", end = '')
        print (position)

    startingLineValue[position[1]] = (startingLineValue[position[1]]*attemptNum + max(score, 0)*math.log(attemptNum+1, 2)) / (attemptNum + 1)
    if (score > bestScore):
        bestSequence = robot.sequence
        bestScore = score
        
    robot.sequence = []

    if ((attemptNum % 100 == 1) or (attemptNum > 18000)):
        for i in range (len (field)):
            if (i != startingLine):
                for j in range (len (field[i])):
                    if (j % 2 == 0):
                        print ("\033[40m\033[37m{}".format(round(np.linalg.norm(value[i][j]), 0)), end = '')
                    else:
                        print ("\033[40m\033[35m{}".format(round(np.linalg.norm(value[i][j]), 0)), end = '')
            else:
                for j in range (len (field[i])):
                    if (j % 2 == 0):
                        print ("\033[43m\033[30m{}".format(round(np.linalg.norm(value[i][j]), 0)), end = '')
                    else:
                        print ("\033[43m\033[35m{}".format(round(np.linalg.norm(value[i][j]), 0)), end = '')
            print()    
        print("\033[0m")
        for i in range (len(field[0])):
            print(round(startingLineValue[i], 1), end = "|")
     
        while (len(cellsToRestore) > 0):
            temp = cellsToRestore.pop(len(cellsToRestore) - 1)
            field[temp[0]][temp[1]] = temp[2]


print ("The best strategy that was found is to move the following way:")
print (bestSequence)
